<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yan.www.mapper.EmployeeMapper">
    <!--<cache type="org.mybatis.caches.ehcache.EhcacheCache" />-->

    <!-- eviction: 缓存的回收策略, flushInterval: 缓存刷新时间, size: 缓存多少个数据, readOnly: 是否只读 -->
    <!--<cache eviction="LRU" flushInterval="60000" size="1024" readOnly="false"></cache>-->

    <select id="getEmpById" resultType="Employee">
        SELECT
            id,
            last_name lastName,
            email,
            gender
        FROM employee
        WHERE id = #{id}
    </select>

    <select id="getEmps" resultType="Employee">
        SELECT *
        FROM employee
    </select>

    <select id="getEmpByMap" resultType="Employee" parameterType="hashmap">
        SELECT id,last_name lastName,email,gender FROM employee WHERE 1=1
        <if test="id != null">AND id=#{id}</if>
        <if test="lastName != null">AND last_name=#{lastName}</if>
        <if test="email != null">AND email=#{email}</if>
        <if test="gender != null">AND gender=#{gender}</if>
    </select>

    <select id="getEmpByIdAndLastName" resultType="Employee">
        SELECT
        id,
        last_name lastName,
        email,
        gender
        FROM employee
        <where>
            <if test="id != null">
                AND id = #{id}
            </if>
            <if test="lastName != null">
                AND last_name = #{lastName}
            </if>
        </where>
    </select>

    <select id="getEmpsByLastNameLike" resultType="Employee">
        SELECT *
        FROM employee
        WHERE last_name LIKE #{lastName}
    </select>

    <select id="getEmpsByLastNameLikeReturnMap" resultType="Employee">
        SELECT *
        FROM employee
        WHERE last_name LIKE #{lastName}
    </select>

    <select id="getEmpByIdReturnMap" resultType="map">
        SELECT *
        FROM employee
        WHERE id LIKE #{id}
    </select>

    <!--
    <insert id="addEmp" parameterType="Employee" useGeneratedKeys="true" keyProperty="id">
        <selectKey keyProperty="id" resultType="int" order="BEFORE">
            SELECT IF(MAX(id) IS NULL, 1, MAX(id) + 2) AS newId FROM employee
        </selectKey>
        INSERT INTO employee (id, last_name, email, gender) VALUES (#{id}, #{lastName}, #{email}, #{gender})
    </insert>-->

    <insert id="addEmp" parameterType="Employee">
        INSERT INTO employee (last_name, email, gender) VALUES (#{lastName}, #{email}, #{gender})
    </insert>

    <insert id="addEmpBatch" parameterType="list">
        INSERT INTO employee (last_name, email, gender) VALUES
        <foreach collection="empList" item="emp" separator=",">
            (#{emp.lastName}, #{emp.email}, #{emp.gender})
        </foreach>
    </insert>

    <insert id="addEmpWithId">
        INSERT INTO employee (id, last_name, email, gender) VALUES (#{id}, #{employee.lastName}, #{employee.email}, #{employee.gender})
    </insert>

    <update id="updateEmp" parameterType="Employee">
        UPDATE employee
        SET last_name = #{lastName}, email = #{email}, gender = #{gender}
        WHERE id = #{id}
    </update>

    <update id="updateEmpBatch" parameterType="list">
        <foreach collection="empList" separator=";" item="emp">
            UPDATE employee
            SET last_name = #{emp.lastName}, email = #{emp.email}, gender = #{emp.gender}
            WHERE id = #{emp.id}
        </foreach>
    </update>

    <delete id="deleteEmpById" parameterType="integer">
        DELETE FROM employee
        WHERE id = #{id}
    </delete>

    <delete id="deleteEmpByIds" parameterType="list">
        DELETE FROM employee
        WHERE id = #{id}
    </delete>
</mapper>